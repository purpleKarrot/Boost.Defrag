##########################################################################
# Copyright (C) 2007-2009 Douglas Gregor <doug.gregor@gmail.com>         #
# Copyright (C) 2007-2009 Troy Straszheim <troy@resophonic.com>          #
# Copyright (C) 2010-2011 Daniel Pfeifer <daniel@pfeifer-mail.de>        #
#                                                                        #
# Distributed under the Boost Software License, Version 1.0.             #
# See accompanying file LICENSE_1_0.txt or copy at                       #
#   http://www.boost.org/LICENSE_1_0.txt                                 #
##########################################################################

include(CheckCXXSourceCompiles)

# set CMAKE_THREAD_PREFER_PTHREAD if you prefer pthread on windows
find_package(Threads)
# LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT}

# make visual studio look nice
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(MSVC)
  add_definitions(
    -D_CRT_SECURE_NO_WARNINGS
    -D_SCL_SECURE_NO_WARNINGS
    )
endif()


# Put the libaries and binaries that get built into directories at the
# top of the build tree rather than in hard-to-find leaf
# directories. This simplifies manual testing and the use of the build
# tree rather than installed Boost libraries.
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


# Always include the directory where Boost's include files will be.
if (TEST_INSTALLED_TREE)
  # Use the headers from the installation directory
  include_directories("${CMAKE_INSTALL_PREFIX}/${BOOST_HEADER_DIR}")
elseif (BOOST_CMAKE_SELFTEST)
  # Use selftest headers
  include_directories("${BOOST_CMAKE_SELFTEST_ROOT}/include")
  # and regular boost headers
  include_directories(${CMAKE_CURRENT_SOURCE_DIR})
else()
  # Use the headers directly from the Boost source tree (in boost/)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR})
endif (TEST_INSTALLED_TREE)


# Multi-threading support
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  set(MULTI_THREADED_COMPILE_FLAGS "-pthreads")
  set(MULTI_THREADED_LINK_LIBS rt)
elseif(CMAKE_SYSTEM_NAME STREQUAL "BeOS")
  # No threading options necessary for BeOS
elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSD")
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread")
  set(MULTI_THREADED_LINK_FLAGS "-lpthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "DragonFly")
  # DragonFly is a FreeBSD bariant
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "IRIX")
  # TODO: GCC on Irix doesn't support multi-threading?
elseif(CMAKE_SYSTEM_NAME STREQUAL "HP-UX")
  # TODO: gcc on HP-UX does not support multi-threading?
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  # No threading options necessary for Mac OS X
elseif(UNIX)
  # Assume -pthread and -lrt on all other variants
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread -D_REENTRANT")
  set(MULTI_THREADED_LINK_FLAGS "-lpthread -lrt")
endif()

# TODO: make this an option
set(BUILD_MULTI_THREADED ON)

# Toolset detection.
if (NOT BOOST_TOOLSET)
  if (MSVC60)
    set(BOOST_TOOLSET "vc6")
  elseif(MSVC70)
    set(BOOST_TOOLSET "vc7")
  elseif(MSVC71)
    set(BOOST_TOOLSET "vc71")
  elseif(MSVC80)
    set(BOOST_TOOLSET "vc80")
  elseif(MSVC90)
    set(BOOST_TOOLSET "vc90")
  elseif(MSVC10)
    set(BOOST_TOOLSET "vc100")
  elseif(MSVC)
    set(BOOST_TOOLSET "vc")
  elseif(BORLAND)
    set(BOOST_TOOLSET "bcb")
  elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    # Execute GCC with the -dumpversion option, to give us a version string
    execute_process(
      COMMAND ${CMAKE_CXX_COMPILER} "-dumpversion" 
      OUTPUT_VARIABLE GCC_VERSION_STRING)
    
    # Match only the major and minor versions of the version string
    string(REGEX MATCH "[0-9]+.[0-9]+" GCC_MAJOR_MINOR_VERSION_STRING
      "${GCC_VERSION_STRING}")

    # Strip out the period between the major and minor versions
    string(REGEX REPLACE "\\." "" BOOST_VERSIONING_GCC_VERSION
      "${GCC_MAJOR_MINOR_VERSION_STRING}")
    
    # Set the GCC versioning toolset
    set(BOOST_TOOLSET "gcc${BOOST_VERSIONING_GCC_VERSION}")
  elseif(CMAKE_CXX_COMPILER MATCHES "/icpc$" 
      OR CMAKE_CXX_COMPILER MATCHES "/icpc.exe$" 
      OR CMAKE_CXX_COMPILER MATCHES "/icl.exe$")
    set(BOOST_TOOLSET "intel")
  else()
    set(BOOST_TOOLSET "unknown")
  endif()
  
  # create cache entry
  set(BOOST_TOOLSET ${BOOST_TOOLSET} CACHE STRING "Boost toolset")
  message(STATUS "Boost toolset: ${BOOST_TOOLSET}")
endif (NOT BOOST_TOOLSET)


# Limit CMAKE_CONFIGURATION_TYPES to Debug and Release
#set(config_types "Debug;Release")

#if(MSVC)
#  string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_DEBUGSTATICRUNTIME "${CMAKE_C_FLAGS_DEBUG}") 
#  string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUGSTATICRUNTIME "${CMAKE_CXX_FLAGS_DEBUG}") 
#  string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASESTATICRUNTIME "${CMAKE_C_FLAGS_RELEASE}") 
#  string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASESTATICRUNTIME "${CMAKE_CXX_FLAGS_RELEASE}")
#
#  list(APPEND config_types DebugStaticRuntime ReleaseStaticRuntime)
#endif(MSVC)

# The way to identify whether a generator is multi-configuration is to
# check whether CMAKE_CONFIGURATION_TYPES is set.  The VS/XCode generators
# set it (and ignore CMAKE_BUILD_TYPE).  The Makefile generators do not
# set it (and use CMAKE_BUILD_TYPE).  If CMAKE_CONFIGURATION_TYPES is not
# already set, don't set it.                                   --Brad King

# Tweak the configuration and build types appropriately.
if(CMAKE_CONFIGURATION_TYPES)
#  set(CMAKE_CONFIGURATION_TYPES "${config_types}" CACHE STRING
#    "Semicolon-separate list of supported configuration types" FORCE)
else(CMAKE_CONFIGURATION_TYPES)
  # Build in release mode by default
  if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build (${config_types})" FORCE)
  endif (NOT CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)


# Set the build name 
# set(BUILDNAME "${BOOST_COMPILER}-${BOOST_COMPILER_VERSION}-${BOOST_PLATFORM}")
# boost_report_pretty("Build name" BUILDNAME)


# Append the Boost version number to the versioned name
set(boost_version "${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}")
if(BOOST_VERSION_SUBMINOR GREATER 0)
  set(boost_version "${boost_version}_${BOOST_VERSION_SUBMINOR}")
endif(BOOST_VERSION_SUBMINOR GREATER 0)

# The versioned name starts with the full Boost toolset
if(WIN32)
  set(tag_toolset "-${BOOST_TOOLSET}")
  set(tag_version "-${boost_version}")
else(WIN32)
  set(tag_toolset "")
  set(tag_version "")
endif(WIN32)

# Add -mt for multi-threaded libraries
if(BUILD_MULTI_THREADED)
  set(tag_mt "-mt")
else(BUILD_MULTI_THREADED)
  set(tag_mt "")
endif(BUILD_MULTI_THREADED)

# Using the debug version of the runtime library.
# With Visual C++, this comes automatically with debug
if(MSVC)
  set(tag_rtdebug "g")
else(MSVC)
  set(tag_rtdebug "")
endif(MSVC)

# TODO: python debug
set(tag_pydebug "y")

# CMAKE_<CONFIG>_POSTFIX
set(CMAKE_DEBUG_POSTFIX   "${tag_toolset}${tag_mt}-${tag_rtdebug}d${tag_version}")
set(CMAKE_RELEASE_POSTFIX "${tag_toolset}${tag_mt}${tag_version}")

# Linking statically to the runtime library
set(CMAKE_DEBUGSTATICRUNTIME_POSTFIX   "${tag_toolset}${tag_mt}-s${tag_rtdebug}d${tag_version}")
set(CMAKE_RELEASESTATICRUNTIME_POSTFIX "${tag_toolset}${tag_mt}-s${tag_version}")

include_directories(../include)

#set(CMAKE_SHARED_LIBRARY_PREFIX libboost_)
#set(CMAKE_STATIC_LIBRARY_PREFIX libboost_)

set(BOOSTBOOK_DTD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/boostbook/dtd" CACHE FILEPATH "" FORCE)
set(BOOSTBOOK_XSL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/boostbook/xsl" CACHE FILEPATH "" FORCE)

set(QUICKBOOK_FOUND ON CACHE INTERNAL "" FORCE)
set(QUICKBOOK_EXECUTABLE quickbook)

unset(BOOST_PROJECTS_ALL CACHE)

##########################################################################
@BOOST_MODULE_ADD_SUBDIRECTORIES@

##########################################################################

list(REMOVE_DUPLICATES BOOST_PROJECTS_ALL)
list(SORT BOOST_PROJECTS_ALL)

# function to set CPACK_COMPONENT_* globally
function(set_cpack_component name value)
  string(TOUPPER "CPACK_COMPONENT_${name}" variable)
  set(${variable} ${value} CACHE INTERNAL "" FORCE)
endfunction(set_cpack_component)

unset(CPACK_COMPONENTS_ALL CACHE)

foreach(project ${BOOST_PROJECTS_ALL})
  set(has_dev ${BOOST_PROJECT_${project}_HAS_DEV})
  set(has_doc ${BOOST_PROJECT_${project}_HAS_DOC})
  set(has_exe ${BOOST_PROJECT_${project}_HAS_EXE})
  set(has_lib ${BOOST_PROJECT_${project}_HAS_LIB})
  set(name "${BOOST_PROJECT_${project}_NAME}")
  set(description "${BOOST_PROJECT_${project}_DESCRIPTION}")

  set(group "boost_${project}")
  set_cpack_component(GROUP_${group}_DISPLAY_NAME "${name}")
  set_cpack_component(GROUP_${group}_DESCRIPTION "${description}")

  set_cpack_component(${project}_DEV_GROUP "${group}")
  set_cpack_component(${project}_LIB_GROUP "${group}")
  set_cpack_component(${project}_EXE_GROUP "${group}")

  set_cpack_component(${project}_LIB_DISPLAY_NAME "${name}: Shared Libraries")
  set_cpack_component(${project}_DEV_DISPLAY_NAME "${name}: Static and import Libraries")
  set_cpack_component(${project}_EXE_DISPLAY_NAME "${name}: Tools")

  set_cpack_component(${project}_LIB_DESCRIPTION "${description}")
  set_cpack_component(${project}_DEV_DESCRIPTION "${description}")
  set_cpack_component(${project}_EXE_DESCRIPTION "${description}")

  # Debian
  string(REPLACE "_" "-" debian_name "${project}${BOOST_VERSION}")
  set_cpack_component(${project}_LIB_DEB_PACKAGE "libboost-${debian_name}")
  set_cpack_component(${project}_DEV_DEB_PACKAGE "libboost-${debian_name}-dev")
  set_cpack_component(${project}_EXE_DEB_PACKAGE "boost-${debian_name}")

  # dependencies
  set(dev_depends)
  set(exe_depends)
  set(lib_depends)

  if(has_dev AND has_lib)
    list(APPEND dev_depends ${project}_lib)
  endif(has_dev AND has_lib)

  if(has_exe AND has_lib)
    list(APPEND exe_depends ${project}_lib)
  endif(has_exe AND has_lib)

  foreach(dependancy ${BOOST_PROJECT_${project}_DEPENDS})
    if(has_dev AND BOOST_PROJECT_${dependancy}_HAS_DEV)
      list(APPEND dev_depends ${dependancy}_dev)
    endif(has_dev AND BOOST_PROJECT_${dependancy}_HAS_DEV)
    if(has_lib AND BOOST_PROJECT_${dependancy}_HAS_LIB)
      list(APPEND lib_depends ${dependancy}_lib)
    endif(has_lib AND BOOST_PROJECT_${dependancy}_HAS_LIB)
    if(has_exe AND BOOST_PROJECT_${dependancy}_HAS_LIB)
      list(APPEND exe_depends ${dependancy}_lib)
    endif(has_exe AND BOOST_PROJECT_${dependancy}_HAS_LIB)
  endforeach(dependancy)

  set_cpack_component(${project}_DEV_DEPENDS "${dev_depends}")
  set_cpack_component(${project}_EXE_DEPENDS "${exe_depends}")
  set_cpack_component(${project}_LIB_DEPENDS "${lib_depends}")

  if(has_exe)
    list(APPEND CPACK_COMPONENTS_ALL ${project}_exe)
  endif(has_exe)

  if(has_lib)
    list(APPEND CPACK_COMPONENTS_ALL ${project}_lib)
  endif(has_lib)

  if(has_dev)
    list(APPEND CPACK_COMPONENTS_ALL ${project}_dev)
  endif(has_dev)
endforeach(project)

# make it global
set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} CACHE INTERNAL "" FORCE)
