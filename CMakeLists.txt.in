##########################################################################
# Copyright (C) 2007-2009 Douglas Gregor <doug.gregor@gmail.com>         #
# Copyright (C) 2007-2009 Troy Straszheim <troy@resophonic.com>          #
# Copyright (C) 2010-2011 Daniel Pfeifer <daniel@pfeifer-mail.de>        #
#                                                                        #
# Distributed under the Boost Software License, Version 1.0.             #
# See accompanying file LICENSE_1_0.txt or copy at                       #
#   http://www.boost.org/LICENSE_1_0.txt                                 #
##########################################################################

cmake_minimum_required(VERSION 2.8.4 FATAL_ERROR)
project(Boost)

# make universal binaries on OS X
set(CMAKE_OSX_ARCHITECTURES "i386;x86_64" CACHE STRING "Architectures for OS X")

##########################################################################
# Config Information                                                     #
##########################################################################

set(BOOST_CONFIG_VERSION "1.46")

file(WRITE "${PROJECT_BINARY_DIR}/BoostConfigVersion.cmake"
  "set(PACKAGE_VERSION \"${BOOST_CONFIG_VERSION}\")\n"
  "set(PACKAGE_VERSION_EXACT TRUE)\n"
  )

file(WRITE "${PROJECT_BINARY_DIR}/BoostConfig.cmake"
  "set(Boost_FOUND TRUE)\n"
  "set(Boost_INCLUDE_DIRS \"${CMAKE_BINARY_DIR}/include\")\n"
  "set(Boost_LIBRARY_DIRS \"${CMAKE_BINARY_DIR}/lib\")\n"
  "set(Boost_RESOURCE_PATH \"${PROJECT_SOURCE_DIR}/src/cmake/resources\")\n"
  "set(Boost_MODULE_PATH \"${PROJECT_SOURCE_DIR}/src/cmake/modules\")\n"
  "set(Boost_USE_FILE \"\${Boost_MODULE_PATH}/UseBoost.cmake\")\n"
  "set(Boost_DEV_FILE \"\${Boost_MODULE_PATH}/UseBoostDev.cmake\")\n"
  )

set(Boost_DIR ${PROJECT_BINARY_DIR} CACHE PATH "")
find_package(Boost NO_MODULE)
include("${Boost_DEV_FILE}")

##########################################################################
# Building and Testing                                                   #
##########################################################################

enable_testing()


# set CMAKE_THREAD_PREFER_PTHREAD if you prefer pthread on windows
find_package(Threads)
# LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT}

# make visual studio look nice
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)
endif()

# Put the libaries and binaries that get built into directories at the
# top of the build tree rather than in hard-to-find leaf
# directories. This simplifies manual testing and the use of the build
# tree rather than installed Boost libraries.
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)


# Multi-threading support
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  set(MULTI_THREADED_COMPILE_FLAGS "-pthreads")
  set(MULTI_THREADED_LINK_LIBS rt)
elseif(CMAKE_SYSTEM_NAME STREQUAL "BeOS")
  # No threading options necessary for BeOS
elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSD")
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread")
  set(MULTI_THREADED_LINK_FLAGS "-lpthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "DragonFly")
  # DragonFly is a FreeBSD bariant
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "IRIX")
  # TODO: GCC on Irix doesn't support multi-threading?
elseif(CMAKE_SYSTEM_NAME STREQUAL "HP-UX")
  # TODO: gcc on HP-UX does not support multi-threading?
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  # No threading options necessary for Mac OS X
elseif(UNIX)
  # Assume -pthread and -lrt on all other variants
  set(MULTI_THREADED_COMPILE_FLAGS "-pthread -D_REENTRANT")
  set(MULTI_THREADED_LINK_FLAGS "-lpthread -lrt")
endif()


# Limit CMAKE_CONFIGURATION_TYPES to Debug and Release
#set(config_types "Debug;Release")

#if(MSVC)
#  string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_DEBUGSTATICRUNTIME "${CMAKE_C_FLAGS_DEBUG}") 
#  string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUGSTATICRUNTIME "${CMAKE_CXX_FLAGS_DEBUG}") 
#  string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASESTATICRUNTIME "${CMAKE_C_FLAGS_RELEASE}") 
#  string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASESTATICRUNTIME "${CMAKE_CXX_FLAGS_RELEASE}")
#
#  list(APPEND config_types DebugStaticRuntime ReleaseStaticRuntime)
#endif(MSVC)

# The way to identify whether a generator is multi-configuration is to
# check whether CMAKE_CONFIGURATION_TYPES is set.  The VS/XCode generators
# set it (and ignore CMAKE_BUILD_TYPE).  The Makefile generators do not
# set it (and use CMAKE_BUILD_TYPE).  If CMAKE_CONFIGURATION_TYPES is not
# already set, don't set it.                                   --Brad King

# Tweak the configuration and build types appropriately.
if(CMAKE_CONFIGURATION_TYPES)
#  set(CMAKE_CONFIGURATION_TYPES "${config_types}" CACHE STRING
#    "Semicolon-separate list of supported configuration types" FORCE)
else(CMAKE_CONFIGURATION_TYPES)
  # Build in release mode by default
  if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build (${config_types})" FORCE)
  endif (NOT CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)

#set(CMAKE_SHARED_LIBRARY_PREFIX libboost_)
#set(CMAKE_STATIC_LIBRARY_PREFIX libboost_)

set(BOOSTBOOK_DTD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/boostbook/dtd" CACHE INTERNAL "" FORCE)
set(BOOSTBOOK_XSL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/boostbook/xsl" CACHE INTERNAL "" FORCE)

set(QUICKBOOK_FOUND ON CACHE INTERNAL "" FORCE)
set(QUICKBOOK_EXECUTABLE quickbook)

set(BOOST_PROJECTS_ALL)

##########################################################################
@BOOST_MODULE_ADD_SUBDIRECTORIES@

##########################################################################

list(REMOVE_DUPLICATES BOOST_PROJECTS_ALL)
list(SORT BOOST_PROJECTS_ALL)

# function to set CPACK_COMPONENT_*
function(set_cpack_component name)
  string(TOUPPER "CPACK_COMPONENT_${name}" variable)
  set(${variable} ${ARGN} PARENT_SCOPE)
endfunction(set_cpack_component)

set(CPACK_COMPONENTS_ALL)

foreach(project ${BOOST_PROJECTS_ALL})
  set(has_develop ${BOOST_PROJECT_${project}_HAS_DEVELOP})
  set(has_runtime ${BOOST_PROJECT_${project}_HAS_RUNTIME})
  set(has_manual  ${BOOST_PROJECT_${project}_HAS_DOC})
  set(name        "${BOOST_PROJECT_${project}_NAME}")
  set(description "${BOOST_PROJECT_${project}_DESCRIPTION}")
  set(group       "boost_${project}")

  set_cpack_component(GROUP_${group}_DISPLAY_NAME "${name}")
  set_cpack_component(GROUP_${group}_DESCRIPTION "${description}")

  set_cpack_component(${project}_DEVELOP_GROUP "${group}")
  set_cpack_component(${project}_RUNTIME_GROUP "${group}")
  set_cpack_component(${project}_MANUAL_GROUP "${group}")

  set_cpack_component(${project}_DEVELOP_DISPLAY_NAME "${name}: Static and import Libraries")
  set_cpack_component(${project}_RUNTIME_DISPLAY_NAME "${name}: Runtime Components")
  set_cpack_component(${project}_MANUAL_DISPLAY_NAME "${name}: Manual")

  set_cpack_component(${project}_DEVELOP_DESCRIPTION "${description}")
  set_cpack_component(${project}_RUNTIME_DESCRIPTION "${description}")
  set_cpack_component(${project}_MANUAL_DESCRIPTION "${description}")

  # Debian
  string(REPLACE "_" "-" debian_name "${project}${Boost_VERSION}")
  if(BOOST_PROJECT_${project}_TOOL)
    set(prefix "boost-")
  else()
    set(prefix "libboost-")
  endif()
  
  set_cpack_component(${project}_DEVELOP_DEB_PACKAGE "${prefix}${debian_name}-dev")
  set_cpack_component(${project}_RUNTIME_DEB_PACKAGE "${prefix}${debian_name}")
  set_cpack_component(${project}_MANUAL_DEB_PACKAGE  "${prefix}${debian_name}-doc")

  cmake_parse_arguments(DEB "" "" "DEV;LIB" ${BOOST_PROJECT_${project}_DEB_DEPENDS})
  list(APPEND CPACK_DEBIAN_BUILD_DEPENDS ${DEB_DEV} ${DEB_UNPARSED_ARGUMENTS})

  set_cpack_component(${project}_DEVELOP_DEBIAN_DEPENDS ${DEB_DEV})
  set_cpack_component(${project}_RUNTIME_DEBIAN_DEPENDS ${DEB_LIB} ${DEB_UNPARSED_ARGUMENTS})

  # dependencies
  set(develop_depends)
  set(runtime_depends)

  if(has_develop AND has_runtime)
    list(APPEND develop_depends ${project}_runtime)
  endif(has_develop AND has_runtime)

  foreach(dependancy ${BOOST_PROJECT_${project}_DEPENDS})
    if(has_develop AND BOOST_PROJECT_${dependancy}_HAS_DEVELOP)
      list(APPEND develop_depends ${dependancy}_develop)
    endif(has_develop AND BOOST_PROJECT_${dependancy}_HAS_DEVELOP)
    if(has_runtime AND BOOST_PROJECT_${dependancy}_HAS_RUNTIME)
      list(APPEND runtime_depends ${dependancy}_runtime)
    endif(has_runtime AND BOOST_PROJECT_${dependancy}_HAS_RUNTIME)
  endforeach(dependancy)

  set_cpack_component(${project}_DEVELOP_DEPENDS "${develop_depends}")
  set_cpack_component(${project}_RUNTIME_DEPENDS "${runtime_depends}")

  foreach(component develop runtime manual)
    if(has_${component})
      list(APPEND CPACK_COMPONENTS_ALL ${project}_${component})
    endif(has_${component})
  endforeach(component)
endforeach(project)

list(INSERT BOOST_FOOTER 0
  "${PROJECT_SOURCE_DIR}/BoostCPack.cmake"
  CPack
  )

foreach(file ${BOOST_FOOTER})
  include("${file}")
endforeach(file)
